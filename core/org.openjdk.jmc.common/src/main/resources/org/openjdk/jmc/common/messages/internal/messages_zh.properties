#
#  Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
#
#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
#  The contents of this file are subject to the terms of either the Universal Permissive License 
#  v 1.0 as shown at http://oss.oracle.com/licenses/upl
#   
#  or the following license:
#   
#  Redistribution and use in source and binary forms, with or without modification, are permitted
#  provided that the following conditions are met:
#   
#  1. Redistributions of source code must retain the above copyright notice, this list of conditions
#  and the following disclaimer.
#   
#  2. Redistributions in binary form must reproduce the above copyright notice, this list of
#  conditions and the following disclaimer in the documentation and/or other materials provided with
#  the distribution.
#   
#  3. Neither the name of the copyright holder nor the names of its contributors may be used to
#  endorse or promote products derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ContentType_* keys are constructed in ContentType.lookupNameFor(String)
# These keys do not have a corresponding constant in Messages.java
ContentType_memory=\u5185\u5B58
ContentType_timespan=\u6301\u7EED\u65F6\u95F4
ContentType_count=\u8BA1\u6570
ContentType_index=\u7D22\u5F15
ContentType_identifier=\u6807\u8BC6\u7B26
ContentType_port=\u7AEF\u53E3
ContentType_timestamp=\u65F6\u95F4\u6233
ContentType_percentage=\u767E\u5206\u6BD4
ContentType_number=\u6570\u5B57
ContentType_unknown=\u672A\u77E5
ContentType_text=\u6587\u672C
ContentType_method=\u65B9\u6CD5
ContentType_class=\u7C7B
ContentType_package=\u5305
ContentType_thread=\u7EBF\u7A0B
ContentType_address=\u5730\u5740
ContentType_boolean=\u5E03\u5C14\u578B
ContentType_stacktrace=\u5806\u6808\u8DDF\u8E2A
ContentType_frame=\u5806\u6808\u8DDF\u8E2A\u5E27
ContentType_type=\u7C7B\u578B
ContentType_labeledIdentifier=\u5E26\u6807\u7B7E\u7684\u6807\u8BC6\u7B26
ContentType_frequency=\u983B\u7387
# Spelled out names of prefixes for powers of 10. They are used as a fallback to construct unit names,
# together with the name of the base (strictly "atom") unit. For English these strings are not required.
# Prefixes will always have names, derived from enumeration constants. But the strings are included here
# for the benefit of translators.
# NOTE: Be sure to read about the limited use of unit names below.
#
# These Prefix_*_name keys are constructed in DecimalPrefix.DecimalPrefix(String, int, int, String, String)
# These keys do not have a corresponding constant in Messages.java
Prefix_y_name=\u5E7A
Prefix_z_name=\u4EC4
Prefix_a_name=\u963F
Prefix_f_name=\u98DE
Prefix_p_name=\u76AE
Prefix_n_name=\u7EB3
Prefix_u_name=\u5FAE
Prefix_m_name=\u6BEB
Prefix_c_name=\u5398
Prefix_d_name=\u5206
Prefix_da_name=\u5341
Prefix_h_name=\u767E
Prefix_k_name=\u5343
Prefix_M_name=\u5146
Prefix_G_name=\u5409
Prefix_T_name=\u592A
Prefix_P_name=\u62CD
Prefix_E_name=\u827E
Prefix_Z_name=\u6CFD
Prefix_Y_name=\u5C27
# Spelled out names of prefixes for powers of 1024. They are used as a fallback to construct unit names,
# together with the name of the base (strictly "atom") unit. For English these strings are not required.
# Prefixes will always have names, derived from enumeration constants. But the strings are included here
# for the benefit of translators.
# NOTE: These should never be set to the same as their closest power of 10 counterparts above. It must be
# possible to distinguish them. If there's no reasonable translation, leave them as is. Other mechanisms,
# such as content assist, are used to help users unfamiliar with these prefixes.
# NOTE: Be sure to read about the limited use of unit names below.
#
# These Prefix_*_name keys are constructed in BinaryPrefix.BinaryPrefix(String, int, int, char)
# These keys do not have a corresponding constant in Messages.java
Prefix_Ki_name=kibi
Prefix_Mi_name=mebi
Prefix_Gi_name=gibi
Prefix_Ti_name=tebi
Prefix_Pi_name=pebi
Prefix_Ei_name=exbi
Prefix_Zi_name=zebi
Prefix_Yi_name=yobi
# Spelled out names of units, within a given kind of quantity (a subset of the "content types" above).
# Note that unit names are not required. The names of units are only used for two purposes:
# 1) In unit descriptions when selecting a unit.
# 2) To match against for content assist (type completion) when editing a value of this kind of quantity.
#
# If a unit name is not defined for a given unit, but the unit is a prefixed unit and the base (or "atom")
# unit has a name, a unit name is constructed (currently) by concatenating the names or the prefix and
# the "atom" unit. If no name can be constructed for a unit, no spelled out name will be included in
# the unit description and content assist will only match against the unit symbol. A unit can explicitly
# be unnamed by setting the name to an empty string.
#
# Also, the actual symbols used to display and edit values can be overridden, but this should be used very
# sparingly. There are only two known use cases:
# 1) The year has a standardized symbol "a", for the latin "annum", in the persisting convention we use (UCUM),
# but "y" is used elsewhere and is likely more understandable for English speakers.
# 2) Languages like French use the (arguably more correct) unit "octet" with symbol "o", instead of "byte" and "B".
#
# When overridden, content assist will also match against the original identifier.
#
# Unit_*_*_name keys are constructed in KindOfQuantity.resolveLocalizedName(IPrefix<?>, String, String)
# Unit_*_*_symbol keys are constructed in KindOfQuantity.resolveLocalizedSymbol(IPrefix<?>, String, String)
# These keys do not have a corresponding constant in Messages.java
Unit_memory_B_name=\u5B57\u8282
Unit_timespan_s_name=\u79D2
Unit_timespan_min_name=\u5206\u949F
Unit_timespan_h_name=\u5C0F\u65F6
Unit_timespan_d_name=\u5929
Unit_timespan_wk_name=\u5468
Unit_timespan_a_name=\u5E74
Unit_timespan_a_symbol=\u5E74
Unit_percentage_%_name=\u767E\u5206\u6BD4
# This is somewhat magical, do not localize.
Unit_percentage__symbol=\u00D7100\u00A0%
Unit_frequency_Hz_name=\u8D6B\u5179

# Special description for timestamps, which in addition to the multiplier have an (currently implicit) origin
TimestampKind_SINCE_1970_MSG={0}\uFF0C\u81EA 1970 \u5E74\u4EE5\u6765
# Human readable error messages when editing quantity values
QuantityConversionException_NO_UNIT_MSG=''{0}'' \u4E2D\u6CA1\u6709\u5355\u4F4D, \u5C1D\u8BD5\u4F7F\u7528 ''{1}''\u3002
QuantityConversionException_TOO_HIGH_MSG=\u503C{0}\u592A\u9AD8, \u5FC5\u987B\u81F3\u591A\u4E3A{1}\u3002
QuantityConversionException_TOO_LOW_MSG=\u503C{0}\u592A\u4F4E, \u5FC5\u987B\u81F3\u5C11\u4E3A{1}\u3002
QuantityConversionException_TOO_SMALL_MAGNITUDE_MSG=\u503C{0}\u592A\u5C0F, \u65E0\u6CD5\u5904\u7406\u3002\u6700\u5C0F\u5355\u4F4D\u4E3A{1}\u3002
QuantityConversionException_CONSTRAINTS_DO_NOT_MATCH=\u503C {1} \u4E0E\u952E {0} \u7684\u7EA6\u675F\u6761\u4EF6\u4E0D\u5339\u914D\u3002
QuantityConversionException_UNKNOWN_UNIT_MSG=\u65E0\u6CD5\u8BC6\u522B ''{0}'' \u4E2D\u7684\u5355\u4F4D, \u5C1D\u8BD5\u4F7F\u7528 ''{1}''\u3002
QuantityConversionException_UNPARSEABLE_MSG=\u65E0\u6CD5\u8BC6\u522B\u7684\u503C ''{0}'', \u5C1D\u8BD5\u4F7F\u7528 ''{1}''\u3002
# {0} is a type name, {1} is a size in bytes
TypeHandling_MESSAGE_SIZE={0}\uFF0C\u5927\u5C0F {1}
UnitLookup_TIMESTAMP_OUT_OF_RANGE=\u8D85\u51FA\u8303\u56F4

# IMCFrame_Type_* keys are constructed in IMCFrame.Type.Type(String, int)
# These keys do not have a corresponding constant in Messages.java
IMCFrame_Type_JIT_COMPILED=JIT \u5DF2\u7F16\u8BD1
IMCFrame_Type_INTERPRETED=\u5DF2\u89E3\u91CA
IMCFrame_Type_INLINED=\u5185\u5D4C
IMCFrame_Type_UNKNOWN=\u672A\u77E5

FormatToolkit_DEFAULT_PACKAGE=(\u9ED8\u8BA4\u5305)
ItemAggregate_SHORTEST=\u6700\u77ED
ItemAggregate_FIRST=\u7B2C\u4E00\u4E2A
ItemAggregate_MINIMUM=\u6700\u5C0F
ItemAggregate_LONGEST=\u6700\u957F
ItemAggregate_LAST=\u6700\u540E\u4E00\u4E2A
ItemAggregate_MAXIMUM=\u6700\u5927
ItemAggregate_AVERAGE=\u5E73\u5747
ItemAggregate_TOTAL=\u603B\u8BA1
ItemAggregate_COUNT=\u8BA1\u6570
# {0} is an attribute name
ItemAggregate_DISTINCT=\u552F\u4E00\u7684 {0}
ItemAggregate_VARIANCE=\u65B9\u5DEE (S)
ItemAggregate_VARIANCEP=\u65B9\u5DEE (P)
ItemAggregate_STDDEV=StdDev (S)
ItemAggregate_STDDEVP=StdDev (P)
RangeContentType_FIELD_CENTER=\u4E2D\u5FC3
RangeContentType_FIELD_END=\u7ED3\u675F
RangeContentType_FIELD_EXTENT=\u533A
RangeContentType_FIELD_START=\u5F00\u59CB
# {0} is a type name
RangeContentType_NAME={0} \u7684\u8303\u56F4
# {0} is a string
MISSING_VALUE=N/A
MISSING_VALUE_TOOLTIP=N/A ({0})
