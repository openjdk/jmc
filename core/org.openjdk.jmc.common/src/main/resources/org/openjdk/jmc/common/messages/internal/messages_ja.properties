#
#  Copyright (c) 2018, 2025, Oracle and/or its affiliates. All rights reserved.
#
#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
#  The contents of this file are subject to the terms of either the Universal Permissive License 
#  v 1.0 as shown at https://oss.oracle.com/licenses/upl
#   
#  or the following license:
#   
#  Redistribution and use in source and binary forms, with or without modification, are permitted
#  provided that the following conditions are met:
#   
#  1. Redistributions of source code must retain the above copyright notice, this list of conditions
#  and the following disclaimer.
#   
#  2. Redistributions in binary form must reproduce the above copyright notice, this list of
#  conditions and the following disclaimer in the documentation and/or other materials provided with
#  the distribution.
#   
#  3. Neither the name of the copyright holder nor the names of its contributors may be used to
#  endorse or promote products derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ContentType_* keys are constructed in ContentType.lookupNameFor(String)
# These keys do not have a corresponding constant in Messages.java
ContentType_memory=\u30E1\u30E2\u30EA\u30FC
ContentType_timespan=\u671F\u9593
ContentType_count=\u30AB\u30A6\u30F3\u30C8
ContentType_index=\u7D22\u5F15
ContentType_identifier=\u8B58\u5225\u5B50
ContentType_port=\u30DD\u30FC\u30C8
ContentType_timestamp=\u30BF\u30A4\u30E0\u30B9\u30BF\u30F3\u30D7
ContentType_percentage=\u30D1\u30FC\u30BB\u30F3\u30C6\u30FC\u30B8
ContentType_number=\u756A\u53F7
ContentType_unknown=\u4E0D\u660E
ContentType_text=\u30C6\u30AD\u30B9\u30C8
ContentType_method=\u30E1\u30BD\u30C3\u30C9
ContentType_class=\u30AF\u30E9\u30B9
ContentType_package=\u30D1\u30C3\u30B1\u30FC\u30B8
ContentType_thread=\u30B9\u30EC\u30C3\u30C9
ContentType_address=\u30A2\u30C9\u30EC\u30B9
ContentType_boolean=\u30D6\u30FC\u30EB
ContentType_stacktrace=\u30B9\u30BF\u30C3\u30AF\u30FB\u30C8\u30EC\u30FC\u30B9
ContentType_frame=\u30B9\u30BF\u30C3\u30AF\u30FB\u30C8\u30EC\u30FC\u30B9\u30FB\u30D5\u30EC\u30FC\u30E0
ContentType_type=\u30BF\u30A4\u30D7
ContentType_labeledIdentifier=\u30E9\u30D9\u30EB\u4ED8\u304D\u8B58\u5225\u5B50
ContentType_frequency=\u5468\u6CE2\u6570
# Spelled out names of prefixes for powers of 10. They are used as a fallback to construct unit names,
# together with the name of the base (strictly "atom") unit. For English these strings are not required.
# Prefixes will always have names, derived from enumeration constants. But the strings are included here
# for the benefit of translators.
# NOTE: Be sure to read about the limited use of unit names below.
#
# These Prefix_*_name keys are constructed in DecimalPrefix.DecimalPrefix(String, int, int, String, String)
# These keys do not have a corresponding constant in Messages.java
Prefix_y_name=yocto
Prefix_z_name=zepto
Prefix_a_name=atto
Prefix_f_name=femto
Prefix_p_name=pico
Prefix_n_name=nano
Prefix_u_name=micro
Prefix_m_name=milli
Prefix_c_name=centi
Prefix_d_name=deci
Prefix_da_name=deca
Prefix_h_name=hecto
Prefix_k_name=kilo
Prefix_M_name=mega
Prefix_G_name=giga
Prefix_T_name=tera
Prefix_P_name=peta
Prefix_E_name=exa
Prefix_Z_name=zetta
Prefix_Y_name=yotta
# Spelled out names of prefixes for powers of 1024. They are used as a fallback to construct unit names,
# together with the name of the base (strictly "atom") unit. For English these strings are not required.
# Prefixes will always have names, derived from enumeration constants. But the strings are included here
# for the benefit of translators.
# NOTE: These should never be set to the same as their closest power of 10 counterparts above. It must be
# possible to distinguish them. If there's no reasonable translation, leave them as is. Other mechanisms,
# such as content assist, are used to help users unfamiliar with these prefixes.
# NOTE: Be sure to read about the limited use of unit names below.
#
# These Prefix_*_name keys are constructed in BinaryPrefix.BinaryPrefix(String, int, int, char)
# These keys do not have a corresponding constant in Messages.java
Prefix_Ki_name=kibi
Prefix_Mi_name=mebi
Prefix_Gi_name=gibi
Prefix_Ti_name=tebi
Prefix_Pi_name=pebi
Prefix_Ei_name=exbi
Prefix_Zi_name=zebi
Prefix_Yi_name=yobi
# Spelled out names of units, within a given kind of quantity (a subset of the "content types" above).
# Note that unit names are not required. The names of units are only used for two purposes:
# 1) In unit descriptions when selecting a unit.
# 2) To match against for content assist (type completion) when editing a value of this kind of quantity.
#
# If a unit name is not defined for a given unit, but the unit is a prefixed unit and the base (or "atom")
# unit has a name, a unit name is constructed (currently) by concatenating the names or the prefix and
# the "atom" unit. If no name can be constructed for a unit, no spelled out name will be included in
# the unit description and content assist will only match against the unit symbol. A unit can explicitly
# be unnamed by setting the name to an empty string.
#
# Also, the actual symbols used to display and edit values can be overridden, but this should be used very
# sparingly. There are only two known use cases:
# 1) The year has a standardized symbol "a", for the latin "annum", in the persisting convention we use (UCUM),
# but "y" is used elsewhere and is likely more understandable for English speakers.
# 2) Languages like French use the (arguably more correct) unit "octet" with symbol "o", instead of "byte" and "B".
#
# When overridden, content assist will also match against the original identifier.
#
# Unit_*_*_name keys are constructed in KindOfQuantity.resolveLocalizedName(IPrefix<?>, String, String)
# Unit_*_*_symbol keys are constructed in KindOfQuantity.resolveLocalizedSymbol(IPrefix<?>, String, String)
# These keys do not have a corresponding constant in Messages.java
Unit_memory_B_name=\u30D0\u30A4\u30C8
Unit_timespan_s_name=\u79D2
Unit_timespan_min_name=\u5206
Unit_timespan_h_name=\u6642\u9593
Unit_timespan_d_name=\u65E5
Unit_timespan_wk_name=\u9031
Unit_timespan_a_name=\u5E74
Unit_timespan_a_symbol=y
Unit_percentage_%_name=\u30D1\u30FC\u30BB\u30F3\u30C8
# This is somewhat magical, do not localize.
Unit_percentage__symbol=\u00D7100\u00A0%
Unit_frequency_Hz_name=\u30D8\u30EB\u30C4

# Special description for timestamps, which in addition to the multiplier have an (currently implicit) origin
TimestampKind_SINCE_1970_MSG={0}\u30011970\u4EE5\u964D
# Human readable error messages when editing quantity values
QuantityConversionException_NO_UNIT_MSG=''{0}''\u306E\u5358\u4F4D\u304C\u3042\u308A\u307E\u305B\u3093\u3002''{1}''\u3092\u4F7F\u7528\u3057\u3066\u8A66\u884C\u3057\u3066\u304F\u3060\u3055\u3044\u3002
QuantityConversionException_TOO_HIGH_MSG=\u5024{0}\u306F\u9AD8\u3059\u304E\u307E\u3059\u3002{1}\u4EE5\u4E0B\u306B\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\u3002
QuantityConversionException_TOO_LOW_MSG=\u5024{0}\u306F\u4F4E\u3059\u304E\u307E\u3059\u3002{1}\u4EE5\u4E0A\u306B\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\u3002
QuantityConversionException_TOO_SMALL_MAGNITUDE_MSG=\u5024{0}\u306F\u5C0F\u3055\u3059\u304E\u3066\u51E6\u7406\u3067\u304D\u307E\u305B\u3093\u3002\u6700\u5C0F\u5358\u4F4D\u306F{1}\u3067\u3059\u3002
QuantityConversionException_CONSTRAINTS_DO_NOT_MATCH=\u5024{1}\u3068\u30AD\u30FC{0}\u306E\u5236\u7D04\u304C\u4E00\u81F4\u3057\u307E\u305B\u3093\u3002
QuantityConversionException_UNKNOWN_UNIT_MSG=''{0}''\u306E\u5358\u4F4D\u306F\u8A8D\u8B58\u3067\u304D\u307E\u305B\u3093\u3002''{1}''\u3092\u4F7F\u7528\u3057\u3066\u8A66\u884C\u3057\u3066\u304F\u3060\u3055\u3044\u3002
QuantityConversionException_UNPARSEABLE_MSG=''{0}''\u306E\u5024\u306F\u8A8D\u8B58\u3067\u304D\u307E\u305B\u3093\u3002''{1}''\u3092\u4F7F\u7528\u3057\u3066\u8A66\u884C\u3057\u3066\u304F\u3060\u3055\u3044\u3002
# {0} is a type name, {1} is a size in bytes
TypeHandling_MESSAGE_SIZE={0}\u3001\u30B5\u30A4\u30BA{1}
UnitLookup_TIMESTAMP_OUT_OF_RANGE=\u7BC4\u56F2\u5916

# IMCFrame_Type_* keys are constructed in IMCFrame.Type.Type(String, int)
# These keys do not have a corresponding constant in Messages.java
IMCFrame_Type_JIT_COMPILED=JIT\u30B3\u30F3\u30D1\u30A4\u30EB\u6E08
IMCFrame_Type_INTERPRETED=\u89E3\u6790\u6E08
IMCFrame_Type_INLINED=\u30A4\u30F3\u30E9\u30A4\u30F3
IMCFrame_Type_UNKNOWN=\u4E0D\u660E

FormatToolkit_DEFAULT_PACKAGE=(\u30C7\u30D5\u30A9\u30EB\u30C8\u30FB\u30D1\u30C3\u30B1\u30FC\u30B8)
ItemAggregate_SHORTEST=\u6700\u77ED
ItemAggregate_FIRST=\u7B2C1
ItemAggregate_MINIMUM=\u6700\u5C0F
ItemAggregate_LONGEST=\u6700\u9577
ItemAggregate_LAST=\u6700\u5F8C
ItemAggregate_MAXIMUM=\u6700\u5927
ItemAggregate_AVERAGE=\u5E73\u5747
ItemAggregate_TOTAL=\u5408\u8A08
ItemAggregate_COUNT=\u30AB\u30A6\u30F3\u30C8
# {0} is an attribute name
ItemAggregate_DISTINCT=\u500B\u5225{0}
ItemAggregate_VARIANCE=\u5DEE\u7570(S)
ItemAggregate_VARIANCEP=\u5DEE\u7570(P)
ItemAggregate_STDDEV=StdDev (S)
ItemAggregate_STDDEVP=StdDev (P)
RangeContentType_FIELD_CENTER=\u4E2D\u592E
RangeContentType_FIELD_END=\u7D42\u4E86
RangeContentType_FIELD_EXTENT=\u30A8\u30AF\u30B9\u30C6\u30F3\u30C8
RangeContentType_FIELD_START=\u958B\u59CB
# {0} is a type name
RangeContentType_NAME={0}\u306E\u7BC4\u56F2
# {0} is a string
MISSING_VALUE=N/A
MISSING_VALUE_TOOLTIP=N/A ({0})
