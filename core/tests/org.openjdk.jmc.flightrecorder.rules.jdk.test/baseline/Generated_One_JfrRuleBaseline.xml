<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<reportcollection>
    <report>
        <file>allocation_10s_before.jfr</file>
        <rule>
            <id>Allocations.class</id>
            <severity>Information</severity>
            <summary>The most allocated type is likely ''java.lang.Integer'', most commonly allocated by: &lt;ul&gt;&lt;li&gt;Integer java.lang.Integer.valueOf(int)&lt;/li&gt;&lt;li&gt;void Allocator.go()&lt;/li&gt;&lt;li&gt;void Allocator.main(String[])&lt;/li&gt;&lt;/ul&gt;</summary>
            <explanation>Frequently allocated types are good places to start when trying to reduce garbage collections. Look at where the most common types are being allocated to see if many instances are created along the same call path. Try to reduce the number of instances created by invoking the most commonly taken paths less.</explanation>
        </rule>
        <rule>
            <id>Allocations.thread</id>
            <severity>Information</severity>
            <summary>The most allocations were likely done by thread ''main'' at: &lt;ul&gt;&lt;li&gt;Integer java.lang.Integer.valueOf(int)&lt;/li&gt;&lt;li&gt;void Allocator.go()&lt;/li&gt;&lt;li&gt;void Allocator.main(String[])&lt;/li&gt;&lt;/ul&gt;</summary>
            <explanation>Many allocations performed by the same thread might indicate a problem in a multi-threaded program. Look at the stack traces for the thread with the highest allocation rate. See if the allocation rate can be brought down, or balanced among the active threads.</explanation>
        </rule>
        <rule>
            <id>ApplicationHalts</id>
            <severity>OK</severity>
            <summary>Application efficiency was not highly affected by halts.</summary>
            <explanation>The highest ratio of application halts to execution time was 0.192 % during 4/26/2018 12:10:29.000 PM – 12:11:29 PM. 28.1 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 1.16 %. 28.1 % of the total halts were for reasons other than GC.</explanation>
        </rule>
        <rule>
            <id>BufferLost</id>
            <severity>OK</severity>
            <summary>No Flight Recorder buffers were lost during the recording.</summary>
        </rule>
        <rule>
            <id>BytecodeVerification</id>
            <severity>OK</severity>
            <summary>The application ran with bytecode verification enabled.</summary>
        </rule>
        <rule>
            <id>ClassLeak</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>ClassLoading</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>CodeCache</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>CompareCpu</id>
            <severity>OK</severity>
            <summary>An average CPU load of 1 % was caused by other processes for during 4/26/2018 12:10:33.000 PM – 12:10:34 PM.</summary>
            <explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.</explanation>
        </rule>
        <rule>
            <id>CompressedOops</id>
            <severity>OK</severity>
            <summary>The settings for Compressed Oops were OK.</summary>
        </rule>
        <rule>
            <id>ContextSwitch</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>DMSIncident</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>DebugNonSafepoints</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>DiscouragedVmOptions</id>
            <severity>OK</severity>
            <summary>No problems were found with the VM options.</summary>
        </rule>
        <rule>
            <id>DumpReason</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>DuplicateFlags</id>
            <severity>OK</severity>
            <summary>There were no duplicate JVM flags on the command line.</summary>
        </rule>
        <rule>
            <id>DynamicAgents</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>Errors</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>Exceptions</id>
            <severity>OK</severity>
            <summary>The program generated 0 exceptions per second during 4/26/2018 12:10:30.000 PM – 12:10:31 PM.</summary>
            <explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.</explanation>
        </rule>
        <rule>
            <id>Fatal Errors</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>FewSampledThreads</id>
            <severity>Information</severity>
            <summary>There are fewer sampled threads than the total number of hardware threads (cores).</summary>
            <explanation>1 threads with at least 4 method samples were found, but the machine has 32 hardware threads (cores). The application might benefit from a higher level of parallelism. This could also be caused by threads doing something else than running Java code, for example running native code or spending time in the JVM internals.</explanation>
        </rule>
        <rule>
            <id>FileForce</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>FileRead</id>
            <severity>OK</severity>
            <summary>There are no file read events in this recording.</summary>
        </rule>
        <rule>
            <id>FileWrite</id>
            <severity>OK</severity>
            <summary>There are no file write events in this recording.</summary>
        </rule>
        <rule>
            <id>FinalizersRun</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>FlightRecordingSupport</id>
            <severity>OK</severity>
            <summary>The JVM version used for this recording has full Flight Recorder support.</summary>
        </rule>
        <rule>
            <id>FullGc</id>
            <severity>OK</severity>
            <summary>No Stop-the-World, Full GC events detected.</summary>
        </rule>
        <rule>
            <id>GarbageCollectionInfoRule</id>
            <severity>OK</severity>
        </rule>
        <rule>
            <id>GcFreedRatio</id>
            <severity>Information</severity>
            <summary>The ratio between memory freed by garbage collections per second and liveset is 6,501 %. This may be excessive.</summary>
            <explanation>242 MiB per second was freed by garbage collections during 4/26/2018 12:10:29.000 PM – 12:10:39 PM. The average liveset was 3.72 MiB. This may be excessive.
If the garbage collector can free a lot of memory, it may be because the application allocates a lot of short lived objects. Investigate the allocation stack traces to see which code paths cause the most allocations, and see if they can be reduced.
This recording is only 9.903 s long, consider creating a recording longer than 20 s for improved rule accuracy.</explanation>
        </rule>
        <rule>
            <id>GcInvertedParallelism</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>GcLocker</id>
            <severity>OK</severity>
            <summary>No GCs were affected by the GC Locker.</summary>
        </rule>
        <rule>
            <id>GcOptions</id>
            <severity>OK</severity>
            <summary>No problems were found with the GC configuration.</summary>
        </rule>
        <rule>
            <id>GcPauseRatio</id>
            <severity>OK</severity>
            <summary>Application efficiency was not highly affected by GC pauses.</summary>
            <explanation>The highest ratio between garbage collection pauses and execution time was 0.138 % during 4/26/2018 12:10:29.000 PM – 12:11:29 PM. The garbage collection pause ratio of the entire recording was 0.836 %.</explanation>
            <solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.</solution>
        </rule>
        <rule>
            <id>GcPauseTargetRule</id>
            <severity>OK</severity>
            <summary>All GCs completed before the GC pause target time of 200 ms.</summary>
        </rule>
        <rule>
            <id>GcStall</id>
            <severity>OK</severity>
            <summary>No indications that the garbage collector could not keep up with the workload were detected.</summary>
        </rule>
        <rule>
            <id>HeapContent</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>HeapDump</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>HeapInspectionGc</id>
            <severity>OK</severity>
            <summary>The JVM did not perform any heap inspection GCs.</summary>
            <explanation>This is good since they usually take a lot of time.</explanation>
        </rule>
        <rule>
            <id>HighGc</id>
            <severity>OK</severity>
            <summary>The JVM was paused for 100 % during 4/26/2018 12:10:36.933.000 PM – .944</summary>
            <explanation>The time spent performing garbage collection may be reduced by increasing the heap size or by trying to reduce allocation.</explanation>
        </rule>
        <rule>
            <id>HighJvmCpu</id>
            <severity>OK</severity>
            <summary>The JVM does not seem to cause a lot of CPU load.</summary>
        </rule>
        <rule>
            <id>IncreasingLiveSet</id>
            <severity>OK</severity>
            <summary>No memory leaks were detected.</summary>
        </rule>
        <rule>
            <id>IncreasingMetaSpaceLiveSet</id>
            <severity>OK</severity>
            <summary>The class data does not seem to increase during the recording.</summary>
        </rule>
        <rule>
            <id>JavaBlocking</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>JfrPeriodicEventsFix</id>
            <severity>OK</severity>
            <summary>The version of Java you are running is not affected by a performance issue related to periodic events.</summary>
        </rule>
        <rule>
            <id>LongGcPause</id>
            <severity>OK</severity>
            <summary>The longest GC pause was 11.003 ms.</summary>
            <explanation/>
        </rule>
        <rule>
            <id>LowOnPhysicalMemory</id>
            <severity>OK</severity>
            <summary>The system did not run low on physical memory during this recording.</summary>
        </rule>
        <rule>
            <id>ManagementAgent</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>ManyRunningProcesses</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>MetaspaceOom</id>
            <severity>OK</severity>
            <summary>The metaspace was not exhausted during this recording.</summary>
        </rule>
        <rule>
            <id>MethodProfiling</id>
            <severity>OK</severity>
            <summary>No methods where optimization would be particularly efficient could be detected.</summary>
        </rule>
        <rule>
            <id>MultipleAgents</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>Options</id>
            <severity>OK</severity>
            <summary>No undocumented, deprecated or non-recommended option flags were detected.</summary>
        </rule>
        <rule>
            <id>OverAggressiveRecordingSetting</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>PasswordsInArguments</id>
            <severity>OK</severity>
            <summary>The recording does not seem to contain passwords in the application arguments.</summary>
        </rule>
        <rule>
            <id>PasswordsInEnvironment</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>PasswordsInSystemProperties</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>PrimitiveToObjectConversion</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>ProcessStarted</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>SocketRead</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>SocketWrite</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>StackdepthSetting</id>
            <severity>OK</severity>
            <summary>No stack traces were truncated in this recording.</summary>
        </rule>
        <rule>
            <id>StringDeduplication</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>SystemGc</id>
            <severity>OK</severity>
            <summary>No garbage collections were caused by System.gc().</summary>
        </rule>
        <rule>
            <id>TlabAllocationRatio</id>
            <severity>OK</severity>
            <summary>No object allocations outside of TLABs detected.</summary>
        </rule>
        <rule>
            <id>VMOperations</id>
            <severity>OK</severity>
            <summary>No excessively long VM operations were found in this recording (the longest was 30.318 ms).</summary>
        </rule>
        <rule>
            <id>biasedLockingRevocation</id>
            <severity>Not Applicable</severity>
        </rule>
        <rule>
            <id>biasedLockingRevocationPause</id>
            <severity>OK</severity>
            <summary>No revocation of biased locks found.</summary>
        </rule>
    </report>
</reportcollection>
